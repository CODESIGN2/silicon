# Use new trusty images, should yield newer compilers and packages
sudo: required
dist: xenial
language: cpp

compiler: clang
addons:
  apt:
    sources:
      - llvm-toolchain-xenial-5.0
    packages:
      - clang-5.0
      - lldb-5.0
      - lld-5.0
      - libstdc++6
      - libc6-dev
      - libc6
      - lcov
env:
  global:
    - LOCAL_CC=clang++-5.0
    - LOCAL_CXX=clang++-5.0
    - LOCAL_GCOV=llvm-cov-5.0

before_install:
    - pip install --user cpp-coveralls
    - gem install coveralls-lcov
    - sudo apt-get update -qq
    # Install deps
    - sudo apt-get install -qq libboost-all-dev libssl-dev libsqlite3-dev libcurl4-openssl-dev libgnutls-dev libgcrypt-dev libmysqlclient-dev
    # Create env
    - mkdir -p $HOME/build
    # Install Rabbitmq-c
    - cd $HOME/build
    - git clone https://github.com/alanxz/rabbitmq-c.git
    - mkdir -p rabbitmq-c/build
    - cd rabbitmq-c/build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/local
    - make -j 4 install
    # Install libmicrohttpd
    - cd $HOME/build
    - wget http://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-0.9.48.tar.gz
    - tar xzf libmicrohttpd-0.9.48.tar.gz
    - cd libmicrohttpd-0.9.48
    - ./configure  --prefix=$HOME/local
    - make -j 4 install
    # Install LWan (disabled for now)
    #- cd $HOME/build
    #- git clone git://github.com/lpereira/lwan
    #- mkdir -p lwan/build
    #- cd lwan/build
    #- cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/local
    #- make -j 4 install
    # Install Iod
    - cd $HOME/build
    - git clone https://github.com/matt-42/iod.git
    - mkdir -p iod/build
    - cd iod/build
    - cmake .. -DCMAKE_CXX_COMPILER=${LOCAL_CXX} -DCMAKE_INSTALL_PREFIX=$HOME/local
    - make -j 4 install

install:
    # Install Silicon
    - cd $HOME/build/$TRAVIS_REPO_SLUG
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_CXX_COMPILER=${LOCAL_CXX} -DCMAKE_INSTALL_PREFIX=$HOME/local
    - make -j 4 install

before_script:
    - cd $HOME/build/$TRAVIS_REPO_SLUG
    - mkdir -p tests/build
    - cd tests/build
    - mkdir -p lcov
    - lcov -d $HOME/build --zerocounters --output-file=lcov/tests.info
    - cmake .. -DCMAKE_CXX_COMPILER=${LOCAL_CXX} -DCMAKE_INSTALL_PREFIX=$HOME/local

script:
    - cd $HOME/build/$TRAVIS_REPO_SLUG/tests/build
    - make all test

after_success:
    - cd $HOME/build/$TRAVIS_REPO_SLUG/tests/build
    - lcov --no-external --capture --initial -d $HOME/build/$TRAVIS_REPO_SLUG --output-file=lcov/tests.info --gcov `which ${LOCAL_GCOV}`
    - lcov --remove lcov/tests.info 'tests/*' -o lcov/tests.info
    # - genhtml lcov/tests.info --output-directory lcov
    # - coveralls --root . -E ".*gtest.*" -E ".*CMakeFiles.*" -e "benchmarks" -e "examples" -e "tests" --gcov `which ${LOCAL_GCOV}` --verbose
    # - ls -lhaR
    # - bash <(curl -s https://codecov.io/bash) -R . -g tests -g examples -g benchmarks -G silicon -x ${LOCAL_GCOV} -a "-a" -X coveragepy -X search || echo "Codecov did not collect coverage reports"
    # - LCOV_OPTIONS="--rc lcov_branch_coverage=1" && lcov -b . -d silicon -c --output-file coverage.info && lcov --remove coverage.info '/usr/*' --output-file coverage.info && lcov --list coverage.info
    # - echo "coverage.info\n" && base64 --wrap=64 coverage.info
    - coveralls-lcov --repo-token ${COVERALLS_REPO_TOKEN} lcov/tests.info

after_script:
    echo after_script
